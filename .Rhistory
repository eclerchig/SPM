dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity)[1,1]
)
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
html_table
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
my_data <- patients_db
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_btns <- create_btns(1:nrow(patients_db))
#функция добавления HTML-кода для создания кнопок удаления/редактирования
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="info_',
.x, '" type="button" onclick=get_id(this.id)>подробнее</button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button>
</div>'
))
}
my_data <- patients_db
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_btns <- create_btns(1:nrow(patients_db))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns))
html_table
eths <- apply(html_table, 1, function(x) dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% x[,'ethnicity'])[1,1])
eths <- apply(html_table, 1, function(x) dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% x[,'ethnicity'])[1,])
eths <- apply(html_table, 1, function(x) dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% x[,'ethnicity'])[,1])
eths <- apply(html_table, 1, function(x) dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% x$ethnicity)[,1])
eths <- apply(html_table, 1, function(x) print(X))[,1])
eths <- apply(html_table, 1, function(x) print(X))
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
#функция добавления HTML-кода для создания кнопок удаления/редактирования
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="info_',
.x, '" type="button" onclick=get_id(this.id)>подробнее</button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button>
</div>'
))
}
my_data <- patients_db
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_btns <- create_btns(1:nrow(patients_db))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns))
eths <- apply(html_table, 1, function(x) print(X))
eths <- apply(html_table, 1, function(x) print(x))
eths <- apply(html_table, 1, function(x) class(x))
eths <- apply(html_table, 1, function(x) class(x))
eths
eths <- rapply(html_table, 1, function(x) print(x))
eths <- rapply(html_table, 1, function(x) print(x))
eths <- lapply(html_table, 1, function(x) print(x))
eths <- apply(html_table, 1, function(x) print(x))
eths <- apply(html_table, 1, function(x) print(x)[1])
eths <- apply(html_table, 1, function(x) print(x)[1,])
eths <- apply(html_table, 1, function(x) print(x)$ethnicity)
eths <- apply(html_table, 1, function(x) type(x))
eths <- apply(html_table, 1, function(x) print(x))
eths <- apply(html_table, 1, function(x) print(x)[11])
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
#функция добавления HTML-кода для создания кнопок удаления/редактирования
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="info_',
.x, '" type="button" onclick=get_id(this.id)>подробнее</button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button>
</div>'
))
}
my_data <- patients_db
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_btns <- create_btns(1:nrow(patients_db))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(ethnicity = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity))
for (i in 1:nrow(patients_db)){
for (i in 1:nrow(patients_db)){
eths <- c(eths, dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% patients_db$ethnicity[i]))
}
eths
print(eths)
runApp()
shiny::runApp()
textInput("FIO", label = NULL)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp('C:/Program Files/R/app_diagnostics')
runApp('C:/Program Files/R/app_diagnostics')
library(shiny)
library(DT)
library(dplyr)
library(here)
library(shinyjs)
mtcars <- datasets::mtcars
x <- create_btns(1:nrow(mtcars))
mtcars <- mtcars %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = x)) %>%
dplyr::mutate(vs = ifelse(vs == 0, "V-shaped", "Straight")) %>%
dplyr::mutate(am = ifelse(am == 0, "automatic", "manual"))
mtcars
runApp('C:/Program Files/R/app_diagnostics')
runApp('C:/Program Files/R/app_diagnostics')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
trace()
trace()
runApp()
shiny::runApp()
shiny::runApp()
rv$df_labs
rv$keep_track_id_labs
runApp()
runApp()
runApp()
rv$df_labs
quary
runApp()
runApp()
runApp()
rv$df_labs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nrow(rv$df_labs
nrow(rv$df_labs)
nrow(rv$df_labs)
df_labs
rv$df_labs
runApp()
nrow(rv$df_labs)
rv$df_labs
runApp()
runApp()
runApp()
paste0("\\b", 1, "\\b")
paste0("\\b", 1, "\\b")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
strsplit(input$current_id_lab, "_")[2]
strsplit(input$current_id_lab, "_")
strsplit(input$current_id_lab, "_")[[2]]
strsplit(input$current_id_lab, "_")[1,2]
strsplit(input$current_id_lab, "_")[[1],2]
strsplit(input$current_id_lab, "_")[1]
strsplit(input$current_id_lab, "_")[1,1]
strsplit(input$current_id_lab, "_")[[1]]
str_split(str, " ")[[1]][2]
strsplit(input$current_id_lab, "_")[[1]][2]
runApp()
rv$dt_visit_row
rv$df_visits[,"id"]
strsplit(input$current_id_lab, "_")[[1]][2]
runApp()
runApp()
as.numeric(strsplit(input$current_id_lab, "_")[[1]][2])
runApp()
rv$dt_visit_row
as.character(rv$df_visits[,"id"])
as.character(strsplit(input$current_id_lab, "_")[[1]][2])
input$current_id_lab
runApp()
runApp()
rv$dt_visit_row
runApp()
runApp()
runApp()
runApp()
runApp()
rv$df_labs
input$date_modal
rv$dt_lab_row
runApp()
rv$df_labs
runApp()
query
runApp()
runApp()
runApp()
runApp()
input$current_id_lab
input$current_id_visit
rv$dt_visit_row
runApp()
runApp()
runApp()
query
runApp()
rv$df_labs
runApp()
rv$df_labs
runApp()
runApp()
rv$df_labs
runApp()
query
rv$df_labs
runApp()
runApp()
rv$dt_lab_row
runApp()
current_id
runApp()
runApp()
runApp()
runApp()
query
runApp()
runApp()
runApp()
rv$df_labs
runApp()
runApp()
select_row
rv$dt_lab_row
strsplit(input$current_id_lab, "_")
rv$df_labs[,"id"]
runApp()
as.numeric(strsplit(input$current_id_lab, "_")[[1]][2])
library("xlsx")
library("mice")
library("VIM")
library("dplyr")
library("cowplot")
library("ggplot2")
library("plyr")
library("png")
library("caret")
library("party")
library("partykit")
library("stablelearner")
library("ROCR")
library("PRROC")
library("magrittr")
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
options(max.print=1000000)
dataset <- read.xlsx(getwd() %+% "../data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- read.xlsx(getwd() %+% "data/datas.xlsx", sheetIndex = 1)
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- dataset[,c("fibroids_us_2",	"value_test2_bioch_DK",	"value_kd_ct",	"value_test3_bioch_MDA",	"value_test6_bioch_COD",	"value_test8_bioch_GSH",	"value_test11_bioch_vitE",	"value_test10_bioch_vitA", "age_visit1", "ethnicity", "value_prl_2")]
dataset
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
getwd() %+% "/data/datas.xlsx"
library("xlsx")
library("mice")
library("VIM")
library("dplyr")
library("cowplot")
library("ggplot2")
library("plyr")
library("png")
library("caret")
library("party")
library("partykit")
library("stablelearner")
library("ROCR")
library("PRROC")
library("magrittr")
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
options(max.print=1000000)
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- dataset[,c("fibroids_us_2",	"value_test2_bioch_DK",	"value_kd_ct",	"value_test3_bioch_MDA",	"value_test6_bioch_COD",	"value_test8_bioch_GSH",	"value_test11_bioch_vitE",	"value_test10_bioch_vitA", "age_visit1", "ethnicity", "value_prl_2")]
names(dataset)[1] <- "fibroids_us"
names(dataset)[2] <- "DK"
names(dataset)[3] <- "KD_CT"
names(dataset)[4] <- "MDA"
names(dataset)[5] <- "COD"
names(dataset)[6] <- "GSH"
names(dataset)[7] <- "vitE"
names(dataset)[8] <- "vitA"
names(dataset)[9] <- "age_visit1"
names(dataset)[10] <- "ethnicity"
names(dataset)[11] <- "PRL2"
#dataset <- subset(dataset, ethnicity=='1' |  ethnicity=='2')
dataset <- dataset %>%
mutate(fibroids_us  = factor(fibroids_us, levels = c(0, 1), labels = c('No', 'Yes')),
ethnicity = factor(ethnicity, levels = c(1, 2, 3), labels = c('White', 'Asian', 'Mixed')))
defineAge <- FALSE
dataset <- dataset[ -1126,]
dataset <- dataset[!is.na(dataset$fibroids_us), ]
dataset.tmp1 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA")]
dataset.tmp2 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1")]
dataset.tmp3 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity")]
dataset.tmp4 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity", "PRL2")]
num_tmp <- 3
num_tmp <- 4
dataset <- switch(
num_tmp,
dataset.tmp1,
dataset.tmp2,
dataset.tmp3,
dataset.tmp4
)
summary(dataset)
shuffle_index <- sample(1:nrow(dataset)) #мешаем данные
dataset <- dataset[shuffle_index, ]
head(dataset)
library("xlsx")
library("mice")
library("VIM")
library("dplyr")
library("cowplot")
library("ggplot2")
library("plyr")
library("png")
library("caret")
library("party")
library("partykit")
library("stablelearner")
library("ROCR")
library("PRROC")
library("magrittr")
#ФУНКЦИИ ДЛЯ ТРЕНИРОВКИ МОДЕЛЕЙ
define_controlTree <- function(grid){
control_ctree <<- party::ctree_control(mincriterion = grid['mincriterion'],
mtry = grid['mtry'],
maxdepth = grid['maxdepth'])
}
build_ctree <- function(data, weights, seed) {
if (!is.null(seed)) set.seed(seed)
tree <<- party::ctree(fibroids_us ~., data, controls = control_ctree, weights = weights)
}
plot_ctree <- function(ctree){
plot(ctree)
}
out_info <- function(n_tree, tree){
cat("Номер дерева: ", n_tree,"\n")
cat("seed: ", seeds[n_tree],"\n")
cat("mtry: ", gridParameters_ctree[n_tree, 'mtry'],"\n")
cat("maxdepth: ", gridParameters_ctree[n_tree, 'maxdepth'],"\n")
cat("mincriterion: ", gridParameters_ctree[n_tree, 'mincriterion'],"\n")
cat("Задействованные переменные: \n")
print(tree@data@formula$input)
}
score_model <- function(tree, testdata){
prediction <- predict(tree, testdata)
# Calculate the overall accuracy
correct_ctree <- prediction == testdata$fibroids_us
# Extract the class probabilities.
probabilities <- 1 - unlist(treeresponse(tree, newdata=testdata), use.names=F)[seq(1,nrow(testdata)*2,2)]
# Plot the performance of the model applied to the evaluation set as
# an ROC curve.
pred <- prediction(probabilities, testdata$fibroids_us)
perf <- performance(pred,"tpr","fpr")
auc <- performance(pred,"auc")
auc_ROCR <- performance(pred, measure = "auc")
auc_ROCR <- auc_ROCR@y.values[[1]]
par(mar=c(1,1,1,1)) #исправление ошибки
# print(table(prediction))
# print(table(testing$fibroids_us))
# print(paste("% правильных прогнозов", mean(correct_ctree)))
# cat("AUC = ", auc_ROCR, "\n")
#
# plot(perf, main="ROC curve")
# abline(a = 0, b = 1)
return(auc_ROCR)
}
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
options(max.print=1000000)
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- dataset[,c("fibroids_us_2",	"value_test2_bioch_DK",	"value_kd_ct",	"value_test3_bioch_MDA",	"value_test6_bioch_COD",	"value_test8_bioch_GSH",	"value_test11_bioch_vitE",	"value_test10_bioch_vitA", "age_visit1", "ethnicity", "value_prl_2")]
names(dataset)[1] <- "fibroids_us"
names(dataset)[2] <- "DK"
names(dataset)[3] <- "KD_CT"
names(dataset)[4] <- "MDA"
names(dataset)[5] <- "COD"
names(dataset)[6] <- "GSH"
names(dataset)[7] <- "vitE"
names(dataset)[8] <- "vitA"
names(dataset)[9] <- "age_visit1"
names(dataset)[10] <- "ethnicity"
names(dataset)[11] <- "PRL2"
#dataset <- subset(dataset, ethnicity=='1' |  ethnicity=='2')
dataset <- dataset %>%
mutate(fibroids_us  = factor(fibroids_us, levels = c(0, 1), labels = c('No', 'Yes')),
ethnicity = factor(ethnicity, levels = c(1, 2, 3), labels = c('White', 'Asian', 'Mixed')))
defineAge <- FALSE
dataset <- dataset[ -1126,]
dataset <- dataset[!is.na(dataset$fibroids_us), ]
dataset.tmp1 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA")]
dataset.tmp2 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1")]
dataset.tmp3 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity")]
dataset.tmp4 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity", "PRL2")]
num_tmp <- 4
dataset <- switch(
num_tmp,
dataset.tmp1,
dataset.tmp2,
dataset.tmp3,
dataset.tmp4
)
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
