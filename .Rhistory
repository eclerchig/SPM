shiny::runApp()
runApp()
runApp()
runApp()
runApp()
tags$link()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients <- dbGetQuery(conn, "SELECT * FROM Cars_and_Makes")
patients
runApp()
patients
patients <- dbGetQuery(conn, "SELECT * FROM Patients")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients <- dbGetQuery(conn, "SELECT * FROM Patients")
patients
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
#функция добавления HTML-кода для создания кнопок удаления/редактирования
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="info_',
.x, '" type="button" onclick=get_id(this.id)>подробнее</button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button>
</div>'
))
}
my_data <- patients_db
html_btns <- create_btns(1:nrow(patients_db))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Patients WHERE id = '" %+% ethnicity)
)
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Patients WHERE id = '" %+% ethnicity %+%"'")
)
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity)
)
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1]
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity)[1,]
)
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity)
)
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity)[1,1]
)
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity)[1,1]
)
last_error()
install.packages("rlang")
library(rlang)
last_error()
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(vs = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity)[1,1]
)
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
html_table
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
my_data <- patients_db
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_btns <- create_btns(1:nrow(patients_db))
#функция добавления HTML-кода для создания кнопок удаления/редактирования
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="info_',
.x, '" type="button" onclick=get_id(this.id)>подробнее</button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button>
</div>'
))
}
my_data <- patients_db
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_btns <- create_btns(1:nrow(patients_db))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns))
html_table
eths <- apply(html_table, 1, function(x) dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% x[,'ethnicity'])[1,1])
eths <- apply(html_table, 1, function(x) dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% x[,'ethnicity'])[1,])
eths <- apply(html_table, 1, function(x) dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% x[,'ethnicity'])[,1])
eths <- apply(html_table, 1, function(x) dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% x$ethnicity)[,1])
eths <- apply(html_table, 1, function(x) print(X))[,1])
eths <- apply(html_table, 1, function(x) print(X))
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
#функция добавления HTML-кода для создания кнопок удаления/редактирования
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="info_',
.x, '" type="button" onclick=get_id(this.id)>подробнее</button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button>
</div>'
))
}
my_data <- patients_db
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_btns <- create_btns(1:nrow(patients_db))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns))
eths <- apply(html_table, 1, function(x) print(X))
eths <- apply(html_table, 1, function(x) print(x))
eths <- apply(html_table, 1, function(x) class(x))
eths <- apply(html_table, 1, function(x) class(x))
eths
eths <- rapply(html_table, 1, function(x) print(x))
eths <- rapply(html_table, 1, function(x) print(x))
eths <- lapply(html_table, 1, function(x) print(x))
eths <- apply(html_table, 1, function(x) print(x))
eths <- apply(html_table, 1, function(x) print(x)[1])
eths <- apply(html_table, 1, function(x) print(x)[1,])
eths <- apply(html_table, 1, function(x) print(x)$ethnicity)
eths <- apply(html_table, 1, function(x) type(x))
eths <- apply(html_table, 1, function(x) print(x))
eths <- apply(html_table, 1, function(x) print(x)[11])
library(shiny)
library(shinyjs)
library(DT)
library(dplyr)
library(here)
library(xlsx)
library(reactlog)
library(RSQLite)
library(keyring)
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
reactlog::reactlog_enable()
title_pages = c("main_page", "card_patient")
conn <- dbConnect(RSQLite::SQLite(), "PatientsDB.db")
patients_db <- dbGetQuery(conn, "SELECT * FROM Patients")
patients_db
#функция добавления HTML-кода для создания кнопок удаления/редактирования
create_btns <- function(x) {
x %>%
purrr::map_chr(~
paste0(
'<div class = "btn-group">
<button class="btn btn-default action-button btn-info action_button" id="info_',
.x, '" type="button" onclick=get_id(this.id)>подробнее</button>
<button class="btn btn-default action-button btn-danger action_button" id="delete_',
.x, '" type="button" onclick=get_id(this.id)><i class="fa fa-trash-alt"></i></button>
</div>'
))
}
my_data <- patients_db
dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% 1)[1,]
html_btns <- create_btns(1:nrow(patients_db))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns))
html_table <- patients_db %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = html_btns)) %>%
dplyr::mutate(ethnicity = dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% ethnicity))
for (i in 1:nrow(patients_db)){
for (i in 1:nrow(patients_db)){
eths <- c(eths, dbGetQuery(conn, "SELECT name_ethnicity FROM Ethnicities WHERE id = " %+% patients_db$ethnicity[i]))
}
eths
print(eths)
runApp()
shiny::runApp()
textInput("FIO", label = NULL)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp('C:/Program Files/R/app_diagnostics')
runApp('C:/Program Files/R/app_diagnostics')
library(shiny)
library(DT)
library(dplyr)
library(here)
library(shinyjs)
mtcars <- datasets::mtcars
x <- create_btns(1:nrow(mtcars))
mtcars <- mtcars %>%                                                       #добавляем столбец с определением HTML-кода кнопки для строки таблицы
dplyr::bind_cols(tibble("Buttons" = x)) %>%
dplyr::mutate(vs = ifelse(vs == 0, "V-shaped", "Straight")) %>%
dplyr::mutate(am = ifelse(am == 0, "automatic", "manual"))
mtcars
runApp('C:/Program Files/R/app_diagnostics')
runApp('C:/Program Files/R/app_diagnostics')
