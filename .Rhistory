runApp()
runApp()
runApp()
runApp()
runApp()
rv$df_labs
input$date_modal
rv$dt_lab_row
runApp()
rv$df_labs
runApp()
query
runApp()
runApp()
runApp()
runApp()
input$current_id_lab
input$current_id_visit
rv$dt_visit_row
runApp()
runApp()
runApp()
query
runApp()
rv$df_labs
runApp()
rv$df_labs
runApp()
runApp()
rv$df_labs
runApp()
query
rv$df_labs
runApp()
runApp()
rv$dt_lab_row
runApp()
current_id
runApp()
runApp()
runApp()
runApp()
query
runApp()
runApp()
runApp()
rv$df_labs
runApp()
runApp()
select_row
rv$dt_lab_row
strsplit(input$current_id_lab, "_")
rv$df_labs[,"id"]
runApp()
as.numeric(strsplit(input$current_id_lab, "_")[[1]][2])
library("xlsx")
library("mice")
library("VIM")
library("dplyr")
library("cowplot")
library("ggplot2")
library("plyr")
library("png")
library("caret")
library("party")
library("partykit")
library("stablelearner")
library("ROCR")
library("PRROC")
library("magrittr")
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
options(max.print=1000000)
dataset <- read.xlsx(getwd() %+% "../data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- read.xlsx(getwd() %+% "data/datas.xlsx", sheetIndex = 1)
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- dataset[,c("fibroids_us_2",	"value_test2_bioch_DK",	"value_kd_ct",	"value_test3_bioch_MDA",	"value_test6_bioch_COD",	"value_test8_bioch_GSH",	"value_test11_bioch_vitE",	"value_test10_bioch_vitA", "age_visit1", "ethnicity", "value_prl_2")]
dataset
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
getwd() %+% "/data/datas.xlsx"
library("xlsx")
library("mice")
library("VIM")
library("dplyr")
library("cowplot")
library("ggplot2")
library("plyr")
library("png")
library("caret")
library("party")
library("partykit")
library("stablelearner")
library("ROCR")
library("PRROC")
library("magrittr")
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
options(max.print=1000000)
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- dataset[,c("fibroids_us_2",	"value_test2_bioch_DK",	"value_kd_ct",	"value_test3_bioch_MDA",	"value_test6_bioch_COD",	"value_test8_bioch_GSH",	"value_test11_bioch_vitE",	"value_test10_bioch_vitA", "age_visit1", "ethnicity", "value_prl_2")]
names(dataset)[1] <- "fibroids_us"
names(dataset)[2] <- "DK"
names(dataset)[3] <- "KD_CT"
names(dataset)[4] <- "MDA"
names(dataset)[5] <- "COD"
names(dataset)[6] <- "GSH"
names(dataset)[7] <- "vitE"
names(dataset)[8] <- "vitA"
names(dataset)[9] <- "age_visit1"
names(dataset)[10] <- "ethnicity"
names(dataset)[11] <- "PRL2"
#dataset <- subset(dataset, ethnicity=='1' |  ethnicity=='2')
dataset <- dataset %>%
mutate(fibroids_us  = factor(fibroids_us, levels = c(0, 1), labels = c('No', 'Yes')),
ethnicity = factor(ethnicity, levels = c(1, 2, 3), labels = c('White', 'Asian', 'Mixed')))
defineAge <- FALSE
dataset <- dataset[ -1126,]
dataset <- dataset[!is.na(dataset$fibroids_us), ]
dataset.tmp1 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA")]
dataset.tmp2 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1")]
dataset.tmp3 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity")]
dataset.tmp4 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity", "PRL2")]
num_tmp <- 3
num_tmp <- 4
dataset <- switch(
num_tmp,
dataset.tmp1,
dataset.tmp2,
dataset.tmp3,
dataset.tmp4
)
summary(dataset)
shuffle_index <- sample(1:nrow(dataset)) #мешаем данные
dataset <- dataset[shuffle_index, ]
head(dataset)
library("xlsx")
library("mice")
library("VIM")
library("dplyr")
library("cowplot")
library("ggplot2")
library("plyr")
library("png")
library("caret")
library("party")
library("partykit")
library("stablelearner")
library("ROCR")
library("PRROC")
library("magrittr")
#ФУНКЦИИ ДЛЯ ТРЕНИРОВКИ МОДЕЛЕЙ
define_controlTree <- function(grid){
control_ctree <<- party::ctree_control(mincriterion = grid['mincriterion'],
mtry = grid['mtry'],
maxdepth = grid['maxdepth'])
}
build_ctree <- function(data, weights, seed) {
if (!is.null(seed)) set.seed(seed)
tree <<- party::ctree(fibroids_us ~., data, controls = control_ctree, weights = weights)
}
plot_ctree <- function(ctree){
plot(ctree)
}
out_info <- function(n_tree, tree){
cat("Номер дерева: ", n_tree,"\n")
cat("seed: ", seeds[n_tree],"\n")
cat("mtry: ", gridParameters_ctree[n_tree, 'mtry'],"\n")
cat("maxdepth: ", gridParameters_ctree[n_tree, 'maxdepth'],"\n")
cat("mincriterion: ", gridParameters_ctree[n_tree, 'mincriterion'],"\n")
cat("Задействованные переменные: \n")
print(tree@data@formula$input)
}
score_model <- function(tree, testdata){
prediction <- predict(tree, testdata)
# Calculate the overall accuracy
correct_ctree <- prediction == testdata$fibroids_us
# Extract the class probabilities.
probabilities <- 1 - unlist(treeresponse(tree, newdata=testdata), use.names=F)[seq(1,nrow(testdata)*2,2)]
# Plot the performance of the model applied to the evaluation set as
# an ROC curve.
pred <- prediction(probabilities, testdata$fibroids_us)
perf <- performance(pred,"tpr","fpr")
auc <- performance(pred,"auc")
auc_ROCR <- performance(pred, measure = "auc")
auc_ROCR <- auc_ROCR@y.values[[1]]
par(mar=c(1,1,1,1)) #исправление ошибки
# print(table(prediction))
# print(table(testing$fibroids_us))
# print(paste("% правильных прогнозов", mean(correct_ctree)))
# cat("AUC = ", auc_ROCR, "\n")
#
# plot(perf, main="ROC curve")
# abline(a = 0, b = 1)
return(auc_ROCR)
}
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
options(max.print=1000000)
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
dataset
dataset <- dataset[,c("fibroids_us_2",	"value_test2_bioch_DK",	"value_kd_ct",	"value_test3_bioch_MDA",	"value_test6_bioch_COD",	"value_test8_bioch_GSH",	"value_test11_bioch_vitE",	"value_test10_bioch_vitA", "age_visit1", "ethnicity", "value_prl_2")]
names(dataset)[1] <- "fibroids_us"
names(dataset)[2] <- "DK"
names(dataset)[3] <- "KD_CT"
names(dataset)[4] <- "MDA"
names(dataset)[5] <- "COD"
names(dataset)[6] <- "GSH"
names(dataset)[7] <- "vitE"
names(dataset)[8] <- "vitA"
names(dataset)[9] <- "age_visit1"
names(dataset)[10] <- "ethnicity"
names(dataset)[11] <- "PRL2"
#dataset <- subset(dataset, ethnicity=='1' |  ethnicity=='2')
dataset <- dataset %>%
mutate(fibroids_us  = factor(fibroids_us, levels = c(0, 1), labels = c('No', 'Yes')),
ethnicity = factor(ethnicity, levels = c(1, 2, 3), labels = c('White', 'Asian', 'Mixed')))
defineAge <- FALSE
dataset <- dataset[ -1126,]
dataset <- dataset[!is.na(dataset$fibroids_us), ]
dataset.tmp1 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA")]
dataset.tmp2 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1")]
dataset.tmp3 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity")]
dataset.tmp4 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity", "PRL2")]
num_tmp <- 4
dataset <- switch(
num_tmp,
dataset.tmp1,
dataset.tmp2,
dataset.tmp3,
dataset.tmp4
)
dataset <- read.xlsx(getwd() %+% "/data/datas.xlsx", sheetIndex = 1)
shiny::runApp()
runApp()
runApp()
rv$df_labs
str(rv$df_labs)
runApp()
rv$df_labs
runApp()
runApp()
input$KDCT_modal
as.Date(input$date_modal)
input$DK_modal
query
runApp()
tempdir()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = FALSE)
library("xlsx")
library("mice")
library("VIM")
library("dplyr")
library("cowplot")
library("ggplot2")
library("plyr")
library("png")
library("caret")
library("party")
library("partykit")
library("stablelearner")
library("ROCR")
library("PRROC")
library("magrittr")
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
options(max.print=1000000)
library("xlsx")
library("mice")
library("VIM")
library("dplyr")
library("cowplot")
library("ggplot2")
library("plyr")
library("png")
library("caret")
library("party")
library("partykit")
library("stablelearner")
library("ROCR")
library("PRROC")
library("magrittr")
#//////оператор конкатенации строк///////
"%+%" <- function(...){
paste0(...)
}
options(max.print=1000000)
dataset <- read.xlsx(dirname(rstudioapi::getSourceEditorContext()$path) %+% "/datas.xlsx", sheetIndex = 1)
print(dirname(rstudioapi::getSourceEditorContext()$path))
dataset <- dataset[,c("fibroids_us_2",	"value_test2_bioch_DK",	"value_kd_ct",	"value_test3_bioch_MDA",	"value_test6_bioch_COD",	"value_test8_bioch_GSH",	"value_test11_bioch_vitE",	"value_test10_bioch_vitA", "age_visit1", "ethnicity", "value_prl_2")]
names(dataset)[1] <- "fibroids_us"
names(dataset)[2] <- "DK"
names(dataset)[3] <- "KD_CT"
names(dataset)[4] <- "MDA"
names(dataset)[5] <- "COD"
names(dataset)[6] <- "GSH"
names(dataset)[7] <- "vitE"
names(dataset)[8] <- "vitA"
names(dataset)[9] <- "age_visit1"
names(dataset)[10] <- "ethnicity"
names(dataset)[11] <- "PRL2"
#dataset <- subset(dataset, ethnicity=='1' |  ethnicity=='2')
dataset <- dataset %>%
mutate(fibroids_us  = factor(fibroids_us, levels = c(0, 1), labels = c('No', 'Yes')),
ethnicity = factor(ethnicity, levels = c(1, 2, 3), labels = c('White', 'Asian', 'Mixed')))
defineAge <- FALSE
dataset <- dataset[ -1126,]
dataset <- dataset[!is.na(dataset$fibroids_us), ]
dataset.tmp1 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA")]
dataset.tmp2 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1")]
dataset.tmp3 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity")]
dataset.tmp4 <- dataset[ ,c("fibroids_us",	"DK",	"KD_CT",	"MDA", "COD",	"GSH",	"vitE",	"vitA", "age_visit1", "ethnicity", "PRL2")]
num_tmp <- 3
dataset <- switch(
num_tmp,
dataset.tmp1,
dataset.tmp2,
dataset.tmp3,
dataset.tmp4
)
if ("age_visit1" %in% names(dataset)){
defineAge <- TRUE
minAge <- 39
maxAge <- 48
dataset <- subset(dataset, age_visit1 > minAge & age_visit1 <= maxAge)
}
summary(dataset)
shuffle_index <- sample(1:nrow(dataset)) #мешаем данные
dataset <- dataset[shuffle_index, ]
head(dataset)
runApp()
tempReport
file
globalenv()
shiny::runApp()
class(best_trees)
str(best_trees)
best_trees[[1]]
class(best_trees[[1]])
class(best_trees[[1]][[1]])
class(best_trees[[1]][[1]][2])
class(best_trees[[1]][[2]][2])
class(best_trees[[1]][[2]])
class(best_trees[[1]][1])
class(best_trees[[1]][2])
class(best_trees[[1]]$plotTree)
class(best_trees[[1]][1]$plotTree)
class(best_trees[[1]][2]$plotTree)
class(best_trees[1][2]$plotTree)
best_trees$plotTree
best_trees[[1]][1]$plotTree
best_trees[[1]][2]$plotTree
best_trees[[3]][2]$plotTree
best_trees[[2]][2]$plotTree
best_trees[[1]][2]$plotTree
best_trees[1][2]$plotTree
best_trees[1][1]$plotTree
class(best_trees[1][1])
class(best_trees[1][2])
class(best_trees[1][[2]])
class(best_trees[1][3])
class(best_trees[1][3][1])
class(best_trees)
class(best_trees[[1]])
class(best_trees[[2]])
class(best_trees[[1]])
best_trees[1]
best_trees[1][,"ResultCTREE"]
best_trees[,"ResultCTREE"]
best_trees[[1]]
best_trees[[2]]
best_trees[2]
best_trees[[1]]$plotTree
best_trees[[1]][1]$plotTree
best_trees[[[1]]]$plotTree
best_trees[[1]][,1]$plotTree
best_trees[[1]][2]$plotTree
best_trees[[1]][3]$plotTree
best_trees[[1]][1]$plotTree
best_trees$plotTree
best_trees[1]$plotTree
best_trees[[1]]$plotTree
runApp()
best_trees
best_trees[1]
best_trees[2]
best_trees[1]$plotTree
best_trees[[1]]$plotTree
best_trees[[1]]$plotROC
plot(best_trees[[1]]$plotROC)
plot(best_trees[[2]]$plotROC)
plot(best_trees[[10]]$plotROC)
plot(best_trees[[4]]$plotROC)
plot(best_trees[[4]]$scoreAUC)
best_trees[[4]]$scoreAUC
best_trees[[2]]$scoreAUC
best_trees[[3]]$scoreAUC
best_trees[[5]]$scoreAUC
best_trees[[6]]$scoreAUC
best_trees[[7]]$scoreAUC
best_trees[[8]]$scoreAUC
best_trees[[9]]$scoreAUC
best_trees[[10]]$scoreAUC
best_trees[[11]]$scoreAUC
best_trees[[12]]$scoreAUC
best_trees[[13]]$scoreAUC
best_trees[[14]]$scoreAUC
best_tree[[1]]
best_tree[1]
best_tree$plotTree
list(best_tree, best_trees
result_list
result_list[1]
result_list[2]
result_list[2][1]
result_list[[1]][1]
result_list[[1]][2]
result_list[[1]]$plotROC
result_list[[1]]$plotTree
result_list[[2]]$plotTree
result_list[[1]]$plotTree
result_list[[1]][1]$plotTree
result_list[[1]][2]$plotTree
result_list[1][1]$plotTree
result_list[1][2]$plotTree
result_list[1]$plotTree
result_list[[1]]$plotTree
result_list[[2]]$plotTree
result_list[[1]][1]$plotTree
result_list[[1]][2]$plotTree
result_list[[1]][3]$plotTree
result_list[[1]][[1]]$plotTree
result_list[[1]][,1]$plotTree
result_list[[1]][1]$plotTree
result_list[[1]][1]$scoreAUC
result_list[[1]][1]$plotTree
shiny::runApp()
runApp()
runApp()
best_trees
best_trees[1]
best_trees[2]
best_trees[3]
best_trees[3]$plotTree
best_trees[[3]]$plotTree
best_trees[[1]]$plotTree
best_trees[[2]]$plotTree
best_trees[[1]]$plotROC
best_trees[[1]]$plotTree
best_trees[[2]]$plotTree
best_trees[1]$plotTree
best_trees[[1]]
best_trees[[1]][1]$plotTree
best_trees[[1]]$plotTree
best_trees[[2]]$plotTree
best_trees[[1]]$plotTree
best_trees[[1]][2]$plotTree
best_trees[[1]][3]$plotTree
best_trees[[1]][[3]]$plotTree
best_trees[[1]][[1]]$plotTree
best_trees[[1]][[2]]$plotTree
best_trees[[1]][[2]]$plotROC
best_trees[[2]][[2]]$plotROC
best_trees[[1]][[]]
best_trees[[1]][1]
best_trees[[1]][]
best_trees[[1]][[]]
best_trees[[1]][]
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
quary
res
res
res
quary
add_row
quary
quary
query
query
query
add_row
runApp()
runApp()
shiny::runApp()
add_row
add_row
add_row
add_row
add_row
rv$df_visits
